[user]
  email = sunny@sunfox.org
  name = Sunny Ripert

[github]
  user = sunny

[ghi]
  token = !security find-internet-password -a sunny -s github.com -l 'ghi token' -w

[core]
  # Custom pager, requires "git-delta"
  # https://github.com/dandavison/delta#installation
  pager = delta

  # Default editor. Use `subl -n -w` for Sublime Text.
  editor = vim

  # Autoconvert line endings from CRLF (Windows) to LF (everybody else)
  autocrlf = input

  # Global gitignore file
  excludesfile = ~/.gitignore

  # Helps using commands with unicode characters on OSX
  quotepath = false

  # Helps using unicode characters in filenames on file systems like HFS+ on OSX
  precomposeunicode = true

[delta]
  plus-style = "syntax #012800"
  minus-style = "syntax #340001"
  syntax-theme = Monokai Extended

[interactive]
  diffFilter = delta --color-only

[credential]
  # Use OSX's keychain to remember your passwords
  helper = osxkeychain

[alias]
  # Quicker access
  co = checkout
  ci = commit

  # Commit with message
  cm = commit -m

  # Commit with amend
  amend = commit --amend

  # Short status
  st = status -sb

  # Diff as stats
  stat = !git --no-pager diff --stat

  # Add files by patches
  ap = add --patch

  # Short one-line log via http://www.jukie.net/bart/blog/pimping-out-git-log
  l = log -n 10 --pretty=format:'%C(yellow)%h%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset %C(yellow)%d%Creset'

  # One-line log with a graph
  lg = log --graph --pretty=format:'%C(yellow)%h%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset %C(yellow)%d%Creset'

  # Serve local repo. http://coderwall.com/p/eybtga
  # Then others can access via `git clone git://#{YOUR_IP_ADDRESS}/
  serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

  # Removes a file from the index
  unstage = reset --quiet HEAD --

  # Rewind last commit
  uncommit = !git reset --soft HEAD~ && git reset HEAD .

  # Stash
  save = !git add -A && git stash

  # Stash pop
  pop = !git stash pop --quiet && git unstage && git st

  # Via https://gist.github.com/robmiller/6018582
  # Get the current branch name (not so useful in itself, but used in
  # other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"

  # Sorted list of branches
  br = branch --sort=committerdate --format='%(committerdate:relative)\t%(color:cyan)%(if)%(HEAD)%(then)%(color:bold)%(end)%(refname:short) %(color:yellow no-bold)%(push:short)'

  # Commit with a temporary message
  wip = "!git commit -m \"$(git branch-name) WIP\""

  # Commit with a random message
  wtc = "!sh -c \"git commit -m '$(curl -s http://whatthecommit.com/index.txt)' $1\""

  # Commit as a fixup to another commit
  fixup = commit --fixup

  # Pull rebase
  p = pull --rebase

  # Push if pronto does not detect any necessary fixes
  pu = !bundle exec pronto run -c origin/master --exit-code && git push origin

  # Fetch all remotes, with tags and remove dead branches
  f = !~/bin/git-fetch-and-delete

  # Clean all branches except master and current branch (dangerous)
  clean-branches = !git branch | egrep -v '(master|\\*)' | xargs git branch -D

  # Clean merged branches
  sweep-branches = !git branch --merged master | grep -v 'master$' | xargs git branch -d && git remote prune origin

  # Mark the default upstream as origin/
  default-upstream = "!git branch --set-upstream-to=origin/$(git branch-name)"

  # Launch RSpec for only touched spec files
  rspec = "!bin/rspec $(git status --short --untracked-files --no-renames | grep '_spec\\.rb$' | grep -Ev '^ ?D' | cut -b 3-)"
  rspec-dev = "!bin/rspec $(git diff --name-only origin/dev | grep '_spec\\.rb$' | xargs ls 2> /dev/null)"

  # Launch RuboCop for only touched ruby files
  rubocop = "!bin/rubocop $(git status --short --untracked-files --no-renames | grep '\\.rb$' | grep -Ev '^ ?D' | grep -v schema.rb | cut -b 3-)"
  rubocop-dev = "!bin/rubocop $(git diff --name-only origin/dev | grep '\\.rb$' | grep -v schema.rb | xargs ls 2> /dev/null)"

  # Launch erblint for only touched ERB files
  erblint = "!bin/erblint $(git status --short --untracked-files --no-renames | grep '\\.erb$' | grep -Ev '^ ?D' | cut -b 3-)"

  # Test then add files
  specadd = !rspec $@ && git add

  # Spread the love
  praise = blame

  # Because I often end up doing "git git â€¦" for some reason
  git = !git $@

[help]
  # Activate Git's "Did you mean" after a number of seconds
  autocorrect = 20

[push]
  default = current

[pull]
  default = current
  rebase = true

[init]
  templateDir = ~/.config/git/template/
  defaultBranch = main

# Color all the things

[color]
  ui = auto
  diff = auto
  interactive = auto
  status = auto
  branch = auto
  pager = true

[color "branch"]
  current = cyan reverse
  local = cyan
  remote = magenta

[color "diff"]
  meta = yellow

[color "status"]
  header = cyan
  added = yellow
  changed = green
  untracked = cyan
  nobranch = red bold

# Add to your Rails project's `.gitattributes` or `.git/info/attributes`:
#
#     db/schema.rb merge=railsschema
#
[merge "railsschema"]
  name = Newer Rails schema version
  driver = "ruby -e '\n\
    system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
    b = File.read(%(%A))\n\
    b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
      %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
    end\n\
    File.open(%(%A), %(w)) {|f| f.write(b)}\n\
    exit 1 if b.include?(%(<)*%L)'"

[diff]
  noprefix = true

[rebase]
  autosquash = true
